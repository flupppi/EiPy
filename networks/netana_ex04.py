"""Solutions by Felix Kalchschmid"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_netana_ex04.ipynb.

# %% auto 0
__all__ = ['create_graph_a', 'create_graph_b', 'create_graph_c', 'create_graph_d']

# %% ../nbs/02_netana_ex04.ipynb 1
from nbdev.showdoc import *
from typing import Tuple

# %% ../nbs/02_netana_ex04.ipynb 2
from graph_tool.all import *
import graph_tool.inference
import itertools

# %% ../nbs/02_netana_ex04.ipynb 34
# Create graph
def create_graph_a() -> Tuple[Graph, VertexPropertyMap]:
    g = Graph(directed=False)
    vlist = [g.add_vertex() for _ in range(5)]

    # Edges (1-based to 0-based)
    edges = [
        (0, 1), (0, 2), (1, 2),
        (1, 3), (2, 3), (3, 4),
        (4, 5)
    ]
    g.add_edge_list([(u, v) for u, v in edges])
    # Labels (1-based)
    labels = g.new_vertex_property("int")
    for i in range(6):
        labels[g.vertex(i)] = i

    # Define your own partitions
    partition = g.new_vertex_property("int")
    partition[g.vertex(0)] = 1
    partition[g.vertex(1)] = 1
    partition[g.vertex(2)] = 1
    partition[g.vertex(3)] = 0
    partition[g.vertex(4)] = 0
    partition[g.vertex(5)] = 0

    # Draw
    graph_draw(g, vertex_fill_color=partition, output_size=(400, 400))
    return g, partition


# %% ../nbs/02_netana_ex04.ipynb 36
# Create graph
def create_graph_b() -> Tuple[Graph, VertexPropertyMap]:
    g = Graph(directed=False)
    vlist = [g.add_vertex() for _ in range(6)]

    # Edges (1-based to 0-based)
    edges = [
        (0, 1), (0, 2), (1, 2),
        (1, 3), (2, 3), (3, 4),
        (4, 5), (6, 0)
    ]
    g.add_edge_list([(u, v) for u, v in edges])
    # Labels (1-based)
    labels = g.new_vertex_property("int")
    for i in range(7):
        labels[g.vertex(i)] = i

    partition = g.new_vertex_property("int")
    partition[g.vertex(0)] = 0
    partition[g.vertex(1)] = 1
    partition[g.vertex(2)] = 1
    partition[g.vertex(3)] = 1
    partition[g.vertex(4)] = 2
    partition[g.vertex(5)] = 2
    partition[g.vertex(6)] = 0


    # Draw
    graph_draw(g, vertex_fill_color=partition, vertex_text=labels, output_size=(400, 400))
    return g, partition


# %% ../nbs/02_netana_ex04.ipynb 38
# Create graph
def create_graph_c() -> Tuple[Graph, VertexPropertyMap]:
    g = Graph(directed=False)
    vlist = [g.add_vertex() for _ in range(5)]

    # Edges (1-based to 0-based)
    edges = [
        (0, 1), (0, 2), (1, 2),
        (1, 3), (2, 4), (5, 0)
    ]
    g.add_edge_list([(u, v) for u, v in edges])
    # Labels (1-based)
    labels = g.new_vertex_property("int")
    for i in range(6):
        labels[g.vertex(i)] = i


    partition = g.new_vertex_property("int")
    partition[g.vertex(0)] = 0
    partition[g.vertex(1)] = 1
    partition[g.vertex(2)] = 2
    partition[g.vertex(3)] = 1
    partition[g.vertex(4)] = 2
    partition[g.vertex(5)] = 0

    # Draw
    graph_draw(g, vertex_fill_color=partition, vertex_text=labels, output_size=(400, 400))
    return g, partition


# %% ../nbs/02_netana_ex04.ipynb 40
# Create graph
def create_graph_d() -> Tuple[Graph, VertexPropertyMap]:
    g = Graph(directed=False)
    vlist = [g.add_vertex() for _ in range(11)]

    # Edges (1-based to 0-based)
    edges = [
        (0, 1), (0, 2), (1, 2),
        (1, 3), (2, 4), (5, 0),
        (6, 7), (6, 8), (7, 8),
        (7, 9), (8, 10), (6, 11)
    ]
    g.add_edge_list([(u, v) for u, v in edges])
    # Labels (1-based)
    labels = g.new_vertex_property("int")
    for i in range(12):
        labels[g.vertex(i)] = i

    partition = g.new_vertex_property("int")
    partition[g.vertex(0)] = 0
    partition[g.vertex(1)] = 0
    partition[g.vertex(2)] = 0
    partition[g.vertex(3)] = 0
    partition[g.vertex(4)] = 0
    partition[g.vertex(5)] = 0

    partition[g.vertex(6)] = 1
    partition[g.vertex(7)] = 1
    partition[g.vertex(8)] = 1
    partition[g.vertex(9)] = 1
    partition[g.vertex(10)] = 1
    partition[g.vertex(11)] = 1


    # Draw
    graph_draw(g, vertex_fill_color=partition, vertex_text=labels, output_size=(400, 400))
    return g, partition
