# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/networks',
                'doc_host': 'https://flupppi.github.io',
                'git_url': 'https://github.com/flupppi/networks',
                'lib_path': 'networks'},
  'syms': { 'networks.abgabe03': { 'networks.abgabe03.calculate_condition_numbers': ( 'abgabe_blatt_3_kalchschmid_wenzler.html#calculate_condition_numbers',
                                                                                      'networks/abgabe03.py'),
                                   'networks.abgabe03.compare_solutions': ( 'abgabe_blatt_3_kalchschmid_wenzler.html#compare_solutions',
                                                                            'networks/abgabe03.py'),
                                   'networks.abgabe03.gauss_decomposition_pivot': ( 'abgabe_blatt_3_kalchschmid_wenzler.html#gauss_decomposition_pivot',
                                                                                    'networks/abgabe03.py'),
                                   'networks.abgabe03.gauss_elimination_pivot': ( 'abgabe_blatt_3_kalchschmid_wenzler.html#gauss_elimination_pivot',
                                                                                  'networks/abgabe03.py'),
                                   'networks.abgabe03.lu_decomposition_solution': ( 'abgabe_blatt_3_kalchschmid_wenzler.html#lu_decomposition_solution',
                                                                                    'networks/abgabe03.py'),
                                   'networks.abgabe03.solve_linear_system': ( 'abgabe_blatt_3_kalchschmid_wenzler.html#solve_linear_system',
                                                                              'networks/abgabe03.py'),
                                   'networks.abgabe03.trisolve': ( 'abgabe_blatt_3_kalchschmid_wenzler.html#trisolve',
                                                                   'networks/abgabe03.py')},
            'networks.core': {'networks.core.foo': ('core.html#foo', 'networks/core.py')},
            'networks.networkanalysis': { 'networks.networkanalysis.draw_trees': ( 'network_analysis.html#draw_trees',
                                                                                   'networks/networkanalysis.py'),
                                          'networks.networkanalysis.generate_random_tree': ( 'network_analysis.html#generate_random_tree',
                                                                                             'networks/networkanalysis.py'),
                                          'networks.networkanalysis.giant_component_size': ( 'network_analysis.html#giant_component_size',
                                                                                             'networks/networkanalysis.py'),
                                          'networks.networkanalysis.update_graph': ( 'network_analysis.html#update_graph',
                                                                                     'networks/networkanalysis.py')},
            'networks.networks03': { 'networks.networks03.plot_linregress_comparison': ( 'network_analysis.html#plot_linregress_comparison',
                                                                                         'networks/networks03.py')},
            'networks.plotsine': {'networks.plotsine.plot_sine': ('plotsine.html#plot_sine', 'networks/plotsine.py')}}}
